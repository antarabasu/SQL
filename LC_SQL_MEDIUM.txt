#1. Second Highest Salary

Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 

Write a solution to find the second highest salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).

Solution:

select max(salary) SecondHighestSalary 
from
(
    select salary
from employee
where salary <
(
select max(salary) as max_salary
from employee
    )
    ) x
    
**************************************************************************************************************************************************************************

#2. Nth Highest Salary

Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 

Write a solution to find the nth highest salary from the Employee table. If there is no nth highest salary, return null.

-CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
-BEGIN
-  RETURN (
-      # Write your MySQL query statement below.
-
-  );
-END

**************************************************************************************************************************************************************************

# 3. Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.

select score,
dense_rank() over(order by score desc) as "rank"
from scores;
********************************************************************************************************************************************************************

#4. Consecutive Numbers
Find all numbers that appear at least three times consecutively.

Return the result table in any order.

select id, num, lead(num) over (order by id) next_num , rank() over(partition by num order by id) rnk
from logs;
********************************************************************************************************************************************************************
#5. Capital Gain/Loss

Write a solution to report the Capital gain/loss for each stock.

The Capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times.

Return the result table in any order.


select stock_name, sell_price- buy_price as 
capital_gain_loss 

from(
    select stock_name,
sum(if(operation='Buy', price,0)) buy_price,
sum(if(operation='Sell', price,0)) sell_price
from stocks
group by 1 )
x;

********************************************************************************************************************************************************************

#6. Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.

Return the result table ordered by id in ascending order.

select
    case
        when id % 2 = 1 and id != (select count(*) from seat) then id+1
        when id % 2 = 0 then id-1
        else id
    end as id,
    student
from
    seat
order by
    id;

*******************************************************************************************************************************************************************
#7. There is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.

Write a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.

select person_name
from(
    select person_name, rank() over(order by cumm_weight desc) rnk
from

(
    select person_name, turn, sum(weight) over(order by turn) cumm_weight
from queue) t
where cumm_weight <=1000)
x
where rnk=1;
*******************************************************************************************************************************************************************
