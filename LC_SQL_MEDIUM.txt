#1. Second Highest Salary

Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 

Write a solution to find the second highest salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).

Solution:

select max(salary) SecondHighestSalary 
from
(
    select salary
from employee
where salary <
(
select max(salary) as max_salary
from employee
    )
    ) x
    
**************************************************************************************************************************************************************************

#2. Nth Highest Salary

Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 

Write a solution to find the nth highest salary from the Employee table. If there is no nth highest salary, return null.

-CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
-BEGIN
-  RETURN (
-      # Write your MySQL query statement below.
-
-  );
-END

**************************************************************************************************************************************************************************

# 3. Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.

select score,
dense_rank() over(order by score desc) as "rank"
from scores;
********************************************************************************************************************************************************************

#4. Consecutive Numbers
Find all numbers that appear at least three times consecutively.

Return the result table in any order.

select id, num, lead(num) over (order by id) next_num , rank() over(partition by num order by id) rnk
from logs;
********************************************************************************************************************************************************************
